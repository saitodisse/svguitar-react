---
description: Regras e melhores pr√°ticas para o projeto svguitar-react
globs: ["**/*"]
alwaysApply: true
---

# Projeto svguitar-react - Guia de Desenvolvimento

## üìã Vis√£o Geral

Este √© um projeto React com TypeScript, Vite, Storybook e Prettier configurados. O projeto usa pnpm como gerenciador de pacotes.

**IMPORTANTE**: Este projeto utiliza especifica√ß√µes detalhadas que est√£o na pasta `specs/`. Sempre consulte os arquivos de especifica√ß√£o antes de fazer mudan√ßas de c√≥digo relevantes.

## üõ†Ô∏è Stack Tecnol√≥gica

### Principais Depend√™ncias

- **React 19.1.1** - Framework principal
- **TypeScript 5.8.3** - Tipagem est√°tica
- **Vite 7.1.7** - Build tool e dev server
- **Storybook 9.1.8** - Desenvolvimento de componentes isolados
- **Prettier 3.6.2** - Formata√ß√£o de c√≥digo
- **ESLint 9.36.0** - Linting e qualidade de c√≥digo

### Gerenciador de Pacotes

- **pnpm** - Use sempre pnpm, n√£o npm ou yarn

## üöÄ Comandos Principais

### Desenvolvimento

```bash
# Iniciar servidor de desenvolvimento
pnpm dev

# Build para produ√ß√£o
pnpm build

# Preview da build de produ√ß√£o
pnpm preview
```

### Qualidade de C√≥digo

```bash
# Executar linting
pnpm lint

# Formatar c√≥digo com Prettier
pnpm format

# Verificar formata√ß√£o sem alterar arquivos
pnpm format:check
```

### Storybook

```bash
# Iniciar Storybook em modo desenvolvimento
pnpm storybook

# Build do Storybook para produ√ß√£o
pnpm build-storybook
```

## ‚öôÔ∏è Configura√ß√µes Importantes

### Prettier (.prettierrc)

- **Semicolons**: Habilitados
- **Quotes**: Duplas (padr√£o)
- **Print Width**: 110 caracteres
- **Tab Width**: 4 espa√ßos
- **Use Tabs**: Sim (ao inv√©s de espa√ßos)
- **Trailing Commas**: ES5
- **End of Line**: LF

### Storybook

- **Tema**: Dark theme configurado
- **Localiza√ß√£o**: `.storybook/`
- **Configura√ß√µes**: `manager.js` (tema UI) e `preview.ts` (tema docs)

### Estrutura de Arquivos

```
src/
‚îú‚îÄ‚îÄ stories/          # Componentes e stories do Storybook
‚îú‚îÄ‚îÄ App.tsx          # Componente principal
‚îú‚îÄ‚îÄ main.tsx         # Entry point da aplica√ß√£o
‚îî‚îÄ‚îÄ index.css        # Estilos globais
```

## üìù Melhores Pr√°ticas

### 1. Auditoria de Especifica√ß√µes (OBRIGAT√ìRIO)

Antes de qualquer mudan√ßa de c√≥digo relevante, a IA DEVE:

#### Auditoria do Plano de Implementa√ß√£o

- **Ler com olho cr√≠tico** os arquivos em `specs/` (especialmente `plan.md`, `tasks.md`, `research.md`)
- **Determinar se h√° uma sequ√™ncia √≥bvia de tarefas** ou se h√° pe√ßas de over-engineering
- **Identificar depend√™ncias** entre tarefas e validar se a ordem faz sentido
- **Questionar complexidade desnecess√°ria** e sugerir simplifica√ß√µes quando apropriado

#### Checklist de Revis√£o e Aceite

Para cada especifica√ß√£o, marcar cada item abaixo se atende aos crit√©rios (deixar vazio se n√£o atender):

**Qualidade do Conte√∫do**:

- [ ] Sem detalhes de implementa√ß√£o (linguagens, frameworks, APIs)
- [ ] Foco no valor ao usu√°rio e necessidades de neg√≥cio
- [ ] Escrito para stakeholders n√£o t√©cnicos
- [ ] Todas as se√ß√µes obrigat√≥rias conclu√≠das

**Integralidade dos Requisitos**:

- [ ] Nenhum marcador [NEEDS CLARIFICATION] remanescente
- [ ] Requisitos test√°veis e n√£o amb√≠guos
- [ ] Crit√©rios de sucesso mensur√°veis
- [ ] Escopo claramente delimitado
- [ ] Depend√™ncias e premissas identificadas

### 2. Formata√ß√£o de C√≥digo

- **SEMPRE** rode `pnpm format` antes de commitar
- Use tabs (n√£o espa√ßos) para indenta√ß√£o
- Linha m√°xima de 110 caracteres
- Use aspas duplas para strings

### 3. Desenvolvimento de Componentes

- Crie stories no Storybook para todos os componentes
- Use TypeScript com tipagem expl√≠cita
- Componentes devem estar em `src/stories/` ou `src/components/`
- **SEMPRE** consulte as especifica√ß√µes em `specs/` antes de criar novos componentes

### 4. Imports e Caminhos

- Use imports relativos para APIs: `@/api/chords/[alias]`
- Organize imports: bibliotecas externas primeiro, depois internas

### 5. Commits e Git

- Sempre formate o c√≥digo antes de commitar
- Use mensagens de commit descritivas
- Teste o Storybook antes de fazer push

### 6. Estrutura de Arquivos

- Mantenha componentes pequenos e focados
- Use nomes descritivos para arquivos e componentes
- Organize stories por funcionalidade

## üîß Scripts Dispon√≠veis

| Script            | Comando                | Descri√ß√£o                          |
| ----------------- | ---------------------- | ---------------------------------- |
| `dev`             | `pnpm dev`             | Inicia servidor de desenvolvimento |
| `build`           | `pnpm build`           | Build para produ√ß√£o                |
| `lint`            | `pnpm lint`            | Executa ESLint                     |
| `format`          | `pnpm format`          | Formata c√≥digo com Prettier        |
| `format:check`    | `pnpm format:check`    | Verifica formata√ß√£o                |
| `storybook`       | `pnpm storybook`       | Inicia Storybook                   |
| `build-storybook` | `pnpm build-storybook` | Build do Storybook                 |

## üö® O que N√ÉO Fazer

1. **N√ÉO** use npm ou yarn - sempre pnpm
2. **N√ÉO** commite c√≥digo n√£o formatado
3. **N√ÉO** ignore o ESLint - corrija todos os warnings
4. **N√ÉO** crie componentes sem stories correspondentes
5. **N√ÉO** use espa√ßos ao inv√©s de tabs
6. **N√ÉO** fa√ßa mudan√ßas de c√≥digo sem consultar as especifica√ß√µes em `specs/`
7. **N√ÉO** implemente funcionalidades que n√£o est√£o documentadas nas specs
8. **N√ÉO** ignore a auditoria de especifica√ß√µes antes de mudan√ßas relevantes

## üìÅ Arquivos de Configura√ß√£o Importantes

- `.prettierrc` - Configura√ß√£o do Prettier
- `eslint.config.js` - Configura√ß√£o do ESLint
- `vite.config.ts` - Configura√ß√£o do Vite
- `.storybook/` - Configura√ß√£o do Storybook
- `tsconfig.json` - Configura√ß√£o do TypeScript

## üìã Especifica√ß√µes do Projeto

**CR√çTICO**: Este projeto utiliza especifica√ß√µes detalhadas que DEVEM ser consultadas:

- `specs/001-guitar-svg/spec.md` - Especifica√ß√£o principal da feature
- `specs/001-guitar-svg/plan.md` - Plano de implementa√ß√£o
- `specs/001-guitar-svg/tasks.md` - Lista de tarefas detalhadas
- `specs/001-guitar-svg/research.md` - Decis√µes t√©cnicas e pesquisa
- `specs/001-guitar-svg/data-model.md` - Modelo de dados e interfaces
- `specs/001-guitar-svg/quickstart.md` - Guia de uso da biblioteca
- `specs/001-guitar-svg/contracts/` - Contratos de API e valida√ß√£o

## üéØ Pr√≥ximos Passos Recomendados

1. Configure pre-commit hooks para formata√ß√£o autom√°tica
2. Adicione testes unit√°rios com Vitest
3. Configure CI/CD para verifica√ß√£o autom√°tica
4. Adicione mais addons do Storybook conforme necess√°rio
